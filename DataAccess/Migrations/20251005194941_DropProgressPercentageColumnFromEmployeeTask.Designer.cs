// <auto-generated />
using System;
using DataAccess.Concrete.EntityFramework;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DataAccess.Migrations
{
    [DbContext(typeof(RestaurantContext))]
    [Migration("20251005194941_DropProgressPercentageColumnFromEmployeeTask")]
    partial class DropProgressPercentageColumnFromEmployeeTask
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.20")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Entities.Concrete.BaseEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2025, 10, 5, 22, 49, 39, 867, DateTimeKind.Local).AddTicks(7974));

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable((string)null);

                    b.UseTpcMappingStrategy();
                });

            modelBuilder.Entity("Entities.Concrete.BranchEmployee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BranchId")
                        .HasColumnType("int");

                    b.Property<string>("Degree")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImagePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BranchId");

                    b.ToTable("BranchEmployees");
                });

            modelBuilder.Entity("Entities.Concrete.BranchImage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BranchId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImagePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BranchId");

                    b.ToTable("BranchImages");
                });

            modelBuilder.Entity("Entities.Concrete.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Cities");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Adana"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Adıyaman"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Afyonkarahisar"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Ağrı"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Amasya"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Ankara"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Antalya"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Artvin"
                        },
                        new
                        {
                            Id = 9,
                            Name = "Aydın"
                        },
                        new
                        {
                            Id = 10,
                            Name = "Balıkesir"
                        },
                        new
                        {
                            Id = 11,
                            Name = "Bilecik"
                        },
                        new
                        {
                            Id = 12,
                            Name = "Bingöl"
                        },
                        new
                        {
                            Id = 13,
                            Name = "Bitlis"
                        },
                        new
                        {
                            Id = 14,
                            Name = "Bolu"
                        },
                        new
                        {
                            Id = 15,
                            Name = "Burdur"
                        },
                        new
                        {
                            Id = 16,
                            Name = "Bursa"
                        },
                        new
                        {
                            Id = 17,
                            Name = "Çanakkale"
                        },
                        new
                        {
                            Id = 18,
                            Name = "Çankırı"
                        },
                        new
                        {
                            Id = 19,
                            Name = "Çorum"
                        },
                        new
                        {
                            Id = 20,
                            Name = "Denizli"
                        },
                        new
                        {
                            Id = 21,
                            Name = "Diyarbakır"
                        },
                        new
                        {
                            Id = 22,
                            Name = "Edirne"
                        },
                        new
                        {
                            Id = 23,
                            Name = "Elazığ"
                        },
                        new
                        {
                            Id = 24,
                            Name = "Erzincan"
                        },
                        new
                        {
                            Id = 25,
                            Name = "Erzurum"
                        },
                        new
                        {
                            Id = 26,
                            Name = "Eskişehir"
                        },
                        new
                        {
                            Id = 27,
                            Name = "Gaziantep"
                        },
                        new
                        {
                            Id = 28,
                            Name = "Giresun"
                        },
                        new
                        {
                            Id = 29,
                            Name = "Gümüşhane"
                        },
                        new
                        {
                            Id = 30,
                            Name = "Hakkari"
                        },
                        new
                        {
                            Id = 31,
                            Name = "Hatay"
                        },
                        new
                        {
                            Id = 32,
                            Name = "Isparta"
                        },
                        new
                        {
                            Id = 33,
                            Name = "Mersin"
                        },
                        new
                        {
                            Id = 34,
                            Name = "İstanbul"
                        },
                        new
                        {
                            Id = 35,
                            Name = "İzmir"
                        },
                        new
                        {
                            Id = 36,
                            Name = "Kars"
                        },
                        new
                        {
                            Id = 37,
                            Name = "Kastamonu"
                        },
                        new
                        {
                            Id = 38,
                            Name = "Kayseri"
                        },
                        new
                        {
                            Id = 39,
                            Name = "Kırklareli"
                        },
                        new
                        {
                            Id = 40,
                            Name = "Kırşehir"
                        },
                        new
                        {
                            Id = 41,
                            Name = "Kocaeli"
                        },
                        new
                        {
                            Id = 42,
                            Name = "Konya"
                        },
                        new
                        {
                            Id = 43,
                            Name = "Kütahya"
                        },
                        new
                        {
                            Id = 44,
                            Name = "Malatya"
                        },
                        new
                        {
                            Id = 45,
                            Name = "Manisa"
                        },
                        new
                        {
                            Id = 46,
                            Name = "Kahramanmaraş"
                        },
                        new
                        {
                            Id = 47,
                            Name = "Mardin"
                        },
                        new
                        {
                            Id = 48,
                            Name = "Muğla"
                        },
                        new
                        {
                            Id = 49,
                            Name = "Muş"
                        },
                        new
                        {
                            Id = 50,
                            Name = "Nevşehir"
                        },
                        new
                        {
                            Id = 51,
                            Name = "Niğde"
                        },
                        new
                        {
                            Id = 52,
                            Name = "Ordu"
                        },
                        new
                        {
                            Id = 53,
                            Name = "Rize"
                        },
                        new
                        {
                            Id = 54,
                            Name = "Sakarya"
                        },
                        new
                        {
                            Id = 55,
                            Name = "Samsun"
                        },
                        new
                        {
                            Id = 56,
                            Name = "Siirt"
                        },
                        new
                        {
                            Id = 57,
                            Name = "Sinop"
                        },
                        new
                        {
                            Id = 58,
                            Name = "Sivas"
                        },
                        new
                        {
                            Id = 59,
                            Name = "Tekirdağ"
                        },
                        new
                        {
                            Id = 60,
                            Name = "Tokat"
                        },
                        new
                        {
                            Id = 61,
                            Name = "Trabzon"
                        },
                        new
                        {
                            Id = 62,
                            Name = "Tunceli"
                        },
                        new
                        {
                            Id = 63,
                            Name = "Şanlıurfa"
                        },
                        new
                        {
                            Id = 64,
                            Name = "Uşak"
                        },
                        new
                        {
                            Id = 65,
                            Name = "Van"
                        },
                        new
                        {
                            Id = 66,
                            Name = "Yozgat"
                        },
                        new
                        {
                            Id = 67,
                            Name = "Zonguldak"
                        },
                        new
                        {
                            Id = 68,
                            Name = "Aksaray"
                        },
                        new
                        {
                            Id = 69,
                            Name = "Bayburt"
                        },
                        new
                        {
                            Id = 70,
                            Name = "Karaman"
                        },
                        new
                        {
                            Id = 71,
                            Name = "Kırıkkale"
                        },
                        new
                        {
                            Id = 72,
                            Name = "Batman"
                        },
                        new
                        {
                            Id = 73,
                            Name = "Şırnak"
                        },
                        new
                        {
                            Id = 74,
                            Name = "Bartın"
                        },
                        new
                        {
                            Id = 75,
                            Name = "Ardahan"
                        },
                        new
                        {
                            Id = 76,
                            Name = "Iğdır"
                        },
                        new
                        {
                            Id = 77,
                            Name = "Yalova"
                        },
                        new
                        {
                            Id = 78,
                            Name = "Karabük"
                        },
                        new
                        {
                            Id = 79,
                            Name = "Kilis"
                        },
                        new
                        {
                            Id = 80,
                            Name = "Osmaniye"
                        },
                        new
                        {
                            Id = 81,
                            Name = "Düzce"
                        });
                });

            modelBuilder.Entity("Entities.Concrete.Employee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("BranchId")
                        .HasColumnType("int");

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<byte>("EducationLevel")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint")
                        .HasDefaultValue((byte)5);

                    b.Property<byte>("EmploymentType")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint")
                        .HasDefaultValue((byte)1);

                    b.Property<byte>("Gender")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint")
                        .HasDefaultValue((byte)1);

                    b.Property<DateTime>("HireDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ImageName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImagePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LeaveDate")
                        .HasColumnType("datetime2");

                    b.Property<byte>("MaritalStatus")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint")
                        .HasDefaultValue((byte)1);

                    b.Property<byte?>("MilitaryStatus")
                        .HasColumnType("tinyint");

                    b.Property<string>("NationalId")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("nvarchar(11)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(14)
                        .HasColumnType("nvarchar(14)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<byte>("WorkStatus")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint")
                        .HasDefaultValue((byte)1);

                    b.HasKey("Id");

                    b.HasIndex("BranchId");

                    b.HasIndex("CityId");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("Entities.Concrete.Evaluation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UserId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Evaluations");
                });

            modelBuilder.Entity("Entities.Concrete.HeadOffice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(254)
                        .HasColumnType("nvarchar(254)");

                    b.Property<string>("Facebook")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Gmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Instagram")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MidWeekWorkingHours")
                        .IsRequired()
                        .HasMaxLength(14)
                        .HasColumnType("nvarchar(14)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(14)
                        .HasColumnType("nvarchar(14)");

                    b.Property<string>("SpecialNote")
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.Property<string>("Twitter")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WeekendWorkingHours")
                        .IsRequired()
                        .HasMaxLength(14)
                        .HasColumnType("nvarchar(14)");

                    b.HasKey("Id");

                    b.ToTable("HeadOffices");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "Eğriçam Mahallesi, Adnan Menderes Bulvarı, Sokak: 5, No: 40 Avcılar / İstanbul",
                            Email = "avcilar@firma.com",
                            Facebook = "https://facebook.com/eatwellrestaurant",
                            Gmail = "https://business.google.com/eatwell",
                            Instagram = "https://instagram.com/eatwell_restaurant",
                            MidWeekWorkingHours = "09:00 - 23:00",
                            Phone = "0216 123 45 67",
                            SpecialNote = "* Şubelerimize göre değişiklik gösterebilir.",
                            Twitter = "https://twitter.com/eatwell_tr",
                            WeekendWorkingHours = "11:00 - 22:00"
                        });
                });

            modelBuilder.Entity("Entities.Concrete.LeaveRight", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<byte>("DayCount")
                        .HasColumnType("tinyint");

                    b.Property<int>("LeaveTypeId")
                        .HasColumnType("int");

                    b.Property<string>("SeniorityRange")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<int>("YearId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("LeaveRights");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DayCount = (byte)14,
                            LeaveTypeId = 1,
                            SeniorityRange = "0-1",
                            YearId = 1
                        },
                        new
                        {
                            Id = 2,
                            DayCount = (byte)20,
                            LeaveTypeId = 1,
                            SeniorityRange = "5-15",
                            YearId = 1
                        },
                        new
                        {
                            Id = 3,
                            DayCount = (byte)26,
                            LeaveTypeId = 1,
                            SeniorityRange = "15",
                            YearId = 1
                        },
                        new
                        {
                            Id = 4,
                            DayCount = (byte)5,
                            LeaveTypeId = 2,
                            SeniorityRange = "*",
                            YearId = 1
                        },
                        new
                        {
                            Id = 5,
                            DayCount = (byte)30,
                            LeaveTypeId = 3,
                            SeniorityRange = "*",
                            YearId = 1
                        },
                        new
                        {
                            Id = 6,
                            DayCount = (byte)10,
                            LeaveTypeId = 4,
                            SeniorityRange = "*",
                            YearId = 1
                        },
                        new
                        {
                            Id = 7,
                            DayCount = (byte)112,
                            LeaveTypeId = 5,
                            SeniorityRange = "*",
                            YearId = 1
                        },
                        new
                        {
                            Id = 8,
                            DayCount = (byte)5,
                            LeaveTypeId = 6,
                            SeniorityRange = "*",
                            YearId = 1
                        },
                        new
                        {
                            Id = 9,
                            DayCount = (byte)3,
                            LeaveTypeId = 7,
                            SeniorityRange = "*",
                            YearId = 1
                        },
                        new
                        {
                            Id = 10,
                            DayCount = (byte)5,
                            LeaveTypeId = 8,
                            SeniorityRange = "*",
                            YearId = 1
                        });
                });

            modelBuilder.Entity("Entities.Concrete.LeaveType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.ToTable("LeaveTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Yıllık İzin"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Mazeret İzni"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Ücretsiz İzin"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Hastalık İzni"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Doğum İzni"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Babalık İzni"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Evlilik İzni"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Cenaze İzni"
                        });
                });

            modelBuilder.Entity("Entities.Concrete.OperationClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("OperationClaims");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DisplayName = "Admin",
                            Name = "Admin"
                        },
                        new
                        {
                            Id = 2,
                            DisplayName = "Kullanıcı",
                            Name = "User"
                        },
                        new
                        {
                            Id = 3,
                            DisplayName = "Müdür",
                            Name = "Manager"
                        },
                        new
                        {
                            Id = 4,
                            DisplayName = "Şef",
                            Name = "Chef"
                        },
                        new
                        {
                            Id = 5,
                            DisplayName = "Garson",
                            Name = "Waiter"
                        },
                        new
                        {
                            Id = 6,
                            DisplayName = "Kurye",
                            Name = "Delivery"
                        },
                        new
                        {
                            Id = 7,
                            DisplayName = "Kasiyer",
                            Name = "Cashier"
                        });
                });

            modelBuilder.Entity("Entities.Concrete.OrderProduct", b =>
                {
                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("OrderId", "ProductId");

                    b.HasIndex("ProductId");

                    b.ToTable("OrderProducts");
                });

            modelBuilder.Entity("Entities.Concrete.PageContent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2025, 10, 5, 22, 49, 39, 875, DateTimeKind.Local).AddTicks(3333));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImagePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte>("Page")
                        .HasColumnType("tinyint");

                    b.Property<byte>("Section")
                        .HasColumnType("tinyint");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("PageContents");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreateDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageName = "home-hero.jpg",
                            ImagePath = "https://eatwellimg.blob.core.windows.net/images/home-hero.jpg",
                            Page = (byte)1,
                            Section = (byte)1
                        },
                        new
                        {
                            Id = 2,
                            CreateDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Eatwell, sadece bir restoran değil, bir yaşam tarzıdır. Her bir detayımız, İstanbul'un güzelliklerini ve trendlerini yansıtmak için seçildi. <br> Estetik, minimalist, modern ve elegan atmosferimizle sizleri karşılamak; Eatwell'in sizlere sunduğu ayrıcalıklardan sadece biridir. Eatwell ailesi olarak; sadece yemek sunmuyoruz, sizleri bir yaşam tarzına davet ediyoruz.",
                            ImageName = "home-about-section.jpg",
                            ImagePath = "https://eatwellimg.blob.core.windows.net/images/home-about-section.jpg",
                            Page = (byte)1,
                            Section = (byte)2
                        },
                        new
                        {
                            Id = 3,
                            CreateDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageName = "home-menu-section.jpg",
                            ImagePath = "https://eatwellimg.blob.core.windows.net/images/home-menu-section.jpg",
                            Page = (byte)1,
                            Section = (byte)3
                        },
                        new
                        {
                            Id = 4,
                            CreateDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageName = "about-hero.jpeg",
                            ImagePath = "https://eatwellimg.blob.core.windows.net/images/about-hero.jpeg",
                            Page = (byte)2,
                            Section = (byte)1
                        },
                        new
                        {
                            Id = 5,
                            CreateDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Eatwell, tarihiyle, kültürüyle ve trendleriyle özdeşleşmiş olan İstanbul'un en seçkin noktalarında bulunur. Şehrin enerjisi, Eatwell'in zarif atmosferinde buluşup sizlere unutulmaz bir mekân deneyimi yaşatır. <br> Menümüz, damak zevkinizin sınırlarını zorlayacak özel tatlar içerir. Sabah kahvaltılarından, nefis et yemeklerine, benzersiz salatalar ve dürümlerden, zengin kebap ve ızgaralara kadar geniş bir yelpazede seçenekler sunar.",
                            Page = (byte)2,
                            Section = (byte)2
                        },
                        new
                        {
                            Id = 6,
                            CreateDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Her tabak, aşçılarımızın özenle seçtiği en kaliteli malzemelerle hazırlanır ve özel olarak tasarlanmış menümüzdeki her yemek, sizi lezzetin muhteşem dünyasına çıkarır. <br> Biz, konuklarımıza sadece bir yemek değil, bir anı sunarız. Bizim için her bir müşteri, aile üyesidir. Eatwell'e adım attığınızda, yemekten çok daha fazlasını paylaşırız ve sizi bu samimi atmosferde ağırlamaktan mutluluk duyarız. Gelin, birlikte estetik bir lezzet yolculuğuna çıkalım!",
                            Page = (byte)2,
                            Section = (byte)2
                        },
                        new
                        {
                            Id = 7,
                            CreateDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageName = "about-chef-section.jpg",
                            ImagePath = "https://eatwellimg.blob.core.windows.net/images/about-chef-section.jpg",
                            Page = (byte)2,
                            Section = (byte)4
                        },
                        new
                        {
                            Id = 8,
                            CreateDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageName = "menu-hero.jpg",
                            ImagePath = "https://eatwellimg.blob.core.windows.net/images/menu-hero.jpg",
                            Page = (byte)3,
                            Section = (byte)1
                        },
                        new
                        {
                            Id = 9,
                            CreateDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageName = "gallery-hero.jpg",
                            ImagePath = "https://eatwellimg.blob.core.windows.net/images/gallery-hero.jpg",
                            Page = (byte)4,
                            Section = (byte)1
                        },
                        new
                        {
                            Id = 10,
                            CreateDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageName = "reservation-hero.jpg",
                            ImagePath = "https://eatwellimg.blob.core.windows.net/images/reservation-hero.jpg",
                            Page = (byte)5,
                            Section = (byte)1
                        });
                });

            modelBuilder.Entity("Entities.Concrete.Shift", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Day")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Shifts");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Day = "Pazartesi"
                        },
                        new
                        {
                            Id = 2,
                            Day = "Salı"
                        },
                        new
                        {
                            Id = 3,
                            Day = "Çarşamba"
                        },
                        new
                        {
                            Id = 4,
                            Day = "Perşembe"
                        },
                        new
                        {
                            Id = 5,
                            Day = "Cuma"
                        },
                        new
                        {
                            Id = 6,
                            Day = "Cumartesi"
                        },
                        new
                        {
                            Id = 7,
                            Day = "Pazar"
                        });
                });

            modelBuilder.Entity("Entities.Concrete.ShiftDay", b =>
                {
                    b.Property<int>("ShiftId")
                        .HasColumnType("int");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<TimeSpan?>("EndTime")
                        .HasColumnType("time");

                    b.Property<bool>("IsHoliday")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsLeave")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<TimeSpan?>("StartTime")
                        .HasColumnType("time");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("ShiftId", "EmployeeId");

                    b.HasIndex("EmployeeId");

                    b.ToTable("ShiftDays");
                });

            modelBuilder.Entity("Entities.Concrete.Branch", b =>
                {
                    b.HasBaseType("Entities.Concrete.BaseEntity");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EstimatedOpeningDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Facebook")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Gmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Instagram")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte>("Status")
                        .HasColumnType("tinyint");

                    b.Property<string>("Twitter")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WebSite")
                        .HasColumnType("nvarchar(max)");

                    b.HasIndex("CityId");

                    b.ToTable("Branches");
                });

            modelBuilder.Entity("Entities.Concrete.EmployeeBonus", b =>
                {
                    b.HasBaseType("Entities.Concrete.BaseEntity");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("BonusType")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(9);

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<int>("MonthId")
                        .HasColumnType("int");

                    b.Property<int>("PaymentStatus")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.HasIndex("EmployeeId");

                    b.HasIndex("MonthId");

                    b.ToTable("EmployeeBonuses");
                });

            modelBuilder.Entity("Entities.Concrete.EmployeeDeduction", b =>
                {
                    b.HasBaseType("Entities.Concrete.BaseEntity");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("DeductionType")
                        .HasColumnType("int");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<int>("MonthId")
                        .HasColumnType("int");

                    b.Property<int>("PaymentStatus")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.HasIndex("EmployeeId");

                    b.HasIndex("MonthId");

                    b.ToTable("EmployeeDeductions");
                });

            modelBuilder.Entity("Entities.Concrete.EmployeeSalary", b =>
                {
                    b.HasBaseType("Entities.Concrete.BaseEntity");

                    b.Property<decimal>("BaseSalary")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("EducationAllowance")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<decimal>("GrossSalary")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("MealAllowance")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("MonthId")
                        .HasColumnType("int");

                    b.Property<int>("PaymentStatus")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.Property<decimal?>("TransportAllowance")
                        .HasColumnType("decimal(18,2)");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("MonthId");

                    b.ToTable("EmployeeSalaries");
                });

            modelBuilder.Entity("Entities.Concrete.EmployeeSubTask", b =>
                {
                    b.HasBaseType("Entities.Concrete.BaseEntity");

                    b.Property<DateTime?>("CompletedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("EmployeeTaskId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.HasIndex("EmployeeTaskId");

                    b.ToTable("EmployeeSubTasks");
                });

            modelBuilder.Entity("Entities.Concrete.EmployeeTask", b =>
                {
                    b.HasBaseType("Entities.Concrete.BaseEntity");

                    b.Property<int>("AssignedById")
                        .HasColumnType("int");

                    b.Property<int>("AssigneeId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<byte>("PriorityLevel")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint")
                        .HasDefaultValue((byte)1);

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<byte>("TaskStatus")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint")
                        .HasDefaultValue((byte)1);

                    b.HasIndex("AssignedById");

                    b.HasIndex("AssigneeId");

                    b.ToTable("EmployeeTasks");
                });

            modelBuilder.Entity("Entities.Concrete.EmployeeTaskComment", b =>
                {
                    b.HasBaseType("Entities.Concrete.BaseEntity");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<int>("EmployeeTaskId")
                        .HasColumnType("int");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("EmployeeTaskId");

                    b.ToTable("EmployeeTaskComments");
                });

            modelBuilder.Entity("Entities.Concrete.MealCategory", b =>
                {
                    b.HasBaseType("Entities.Concrete.BaseEntity");

                    b.Property<DateTime?>("DeactivationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ImageName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImagePath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.ToTable("MealCategories");
                });

            modelBuilder.Entity("Entities.Concrete.Month", b =>
                {
                    b.HasBaseType("Entities.Concrete.BaseEntity");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<int>("YearId")
                        .HasColumnType("int");

                    b.HasIndex("YearId");

                    b.ToTable("Months");

                    b.HasData(
                        new
                        {
                            Id = 10,
                            CreateDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            Name = "Ocak",
                            YearId = 2
                        },
                        new
                        {
                            Id = 11,
                            CreateDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            Name = "Şubat",
                            YearId = 2
                        },
                        new
                        {
                            Id = 12,
                            CreateDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            Name = "Mart",
                            YearId = 2
                        },
                        new
                        {
                            Id = 13,
                            CreateDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            Name = "Nisan",
                            YearId = 2
                        },
                        new
                        {
                            Id = 14,
                            CreateDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            Name = "Mayıs",
                            YearId = 2
                        },
                        new
                        {
                            Id = 15,
                            CreateDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            Name = "Haziran",
                            YearId = 2
                        },
                        new
                        {
                            Id = 16,
                            CreateDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            Name = "Temmuz",
                            YearId = 2
                        },
                        new
                        {
                            Id = 17,
                            CreateDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            Name = "Ağustos",
                            YearId = 2
                        },
                        new
                        {
                            Id = 18,
                            CreateDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            Name = "Eylül",
                            YearId = 2
                        },
                        new
                        {
                            Id = 19,
                            CreateDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            Name = "Ekim",
                            YearId = 2
                        },
                        new
                        {
                            Id = 20,
                            CreateDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            Name = "Kasım",
                            YearId = 2
                        },
                        new
                        {
                            Id = 21,
                            CreateDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            Name = "Aralık",
                            YearId = 2
                        });
                });

            modelBuilder.Entity("Entities.Concrete.Order", b =>
                {
                    b.HasBaseType("Entities.Concrete.BaseEntity");

                    b.Property<int>("BranchId")
                        .HasColumnType("int");

                    b.Property<bool>("IsPaid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<byte?>("PaymentMethod")
                        .HasColumnType("tinyint");

                    b.Property<int?>("ReservationId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<int>("TableId")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(18,2)");

                    b.HasIndex("BranchId");

                    b.HasIndex("ReservationId")
                        .IsUnique()
                        .HasFilter("[ReservationId] IS NOT NULL");

                    b.HasIndex("TableId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("Entities.Concrete.Permission", b =>
                {
                    b.HasBaseType("Entities.Concrete.BaseEntity");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("LeaveTypeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<byte>("Status")
                        .HasColumnType("tinyint");

                    b.Property<int>("YearId")
                        .HasColumnType("int");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("LeaveTypeId");

                    b.HasIndex("YearId");

                    b.ToTable("Permissions");
                });

            modelBuilder.Entity("Entities.Concrete.Product", b =>
                {
                    b.HasBaseType("Entities.Concrete.BaseEntity");

                    b.Property<DateTime?>("DeactivationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ImageName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImagePath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool>("IsSelected")
                        .HasColumnType("bit");

                    b.Property<int>("MealCategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<byte>("Order")
                        .HasColumnType("tinyint");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.HasIndex("MealCategoryId");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("Entities.Concrete.Reservation", b =>
                {
                    b.HasBaseType("Entities.Concrete.BaseEntity");

                    b.Property<int>("BranchId")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(254)
                        .HasColumnType("nvarchar(254)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(85)
                        .HasColumnType("nvarchar(85)");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte>("PersonCount")
                        .HasColumnType("tinyint");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(14)
                        .HasColumnType("nvarchar(14)");

                    b.Property<DateTime>("ReservationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("TableId")
                        .HasColumnType("int");

                    b.HasIndex("BranchId");

                    b.HasIndex("TableId");

                    b.ToTable("Reservations");
                });

            modelBuilder.Entity("Entities.Concrete.Table", b =>
                {
                    b.HasBaseType("Entities.Concrete.BaseEntity");

                    b.Property<int>("BranchId")
                        .HasColumnType("int");

                    b.Property<byte>("Capacity")
                        .HasColumnType("tinyint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("No")
                        .HasColumnType("int");

                    b.HasIndex("BranchId");

                    b.ToTable("Tables");
                });

            modelBuilder.Entity("Entities.Concrete.User", b =>
                {
                    b.HasBaseType("Entities.Concrete.BaseEntity");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(254)
                        .HasColumnType("nvarchar(254)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("LastLoginDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("OperationClaimId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(2);

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("Verification")
                        .HasColumnType("bit");

                    b.Property<string>("VerificationCode")
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.Property<DateTime?>("VerificationCodeDuration")
                        .HasColumnType("datetime2");

                    b.HasIndex("OperationClaimId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreateDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            Email = "eatwelladmin@gmail.com",
                            FirstName = "Süper",
                            LastName = "Admin",
                            OperationClaimId = 1,
                            Password = "$2a$11$o8NFTDWpruBKmi7b21tjve3gekmLul5lQn58kSI3E5qNg5q0BnmoG"
                        });
                });

            modelBuilder.Entity("Entities.Concrete.Year", b =>
                {
                    b.HasBaseType("Entities.Concrete.BaseEntity");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(4)
                        .HasColumnType("nvarchar(4)");

                    b.ToTable("Years");

                    b.HasData(
                        new
                        {
                            Id = 2,
                            CreateDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            Name = "2025"
                        });
                });

            modelBuilder.Entity("Entities.Concrete.BranchEmployee", b =>
                {
                    b.HasOne("Entities.Concrete.Branch", "Branch")
                        .WithMany("BranchEmployees")
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Branch");
                });

            modelBuilder.Entity("Entities.Concrete.BranchImage", b =>
                {
                    b.HasOne("Entities.Concrete.Branch", "Branch")
                        .WithMany("BranchImages")
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Branch");
                });

            modelBuilder.Entity("Entities.Concrete.Employee", b =>
                {
                    b.HasOne("Entities.Concrete.Branch", "Branch")
                        .WithMany("Employees")
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Entities.Concrete.City", "City")
                        .WithMany("Employees")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Entities.Concrete.User", "User")
                        .WithOne("Employee")
                        .HasForeignKey("Entities.Concrete.Employee", "UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Branch");

                    b.Navigation("City");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Entities.Concrete.Evaluation", b =>
                {
                    b.HasOne("Entities.Concrete.User", "User")
                        .WithMany("Evaluations")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Entities.Concrete.OrderProduct", b =>
                {
                    b.HasOne("Entities.Concrete.Order", "Order")
                        .WithMany("OrderProducts")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Entities.Concrete.Product", "Product")
                        .WithMany("OrderProducts")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Entities.Concrete.ShiftDay", b =>
                {
                    b.HasOne("Entities.Concrete.Employee", "Employee")
                        .WithMany("ShiftDays")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Concrete.Shift", "Shift")
                        .WithMany("ShiftDays")
                        .HasForeignKey("ShiftId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Employee");

                    b.Navigation("Shift");
                });

            modelBuilder.Entity("Entities.Concrete.Branch", b =>
                {
                    b.HasOne("Entities.Concrete.City", "City")
                        .WithMany("Branches")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");
                });

            modelBuilder.Entity("Entities.Concrete.EmployeeBonus", b =>
                {
                    b.HasOne("Entities.Concrete.Employee", "Employee")
                        .WithMany("EmployeeBonuses")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Entities.Concrete.Month", "Month")
                        .WithMany("EmployeeBonuses")
                        .HasForeignKey("MonthId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Employee");

                    b.Navigation("Month");
                });

            modelBuilder.Entity("Entities.Concrete.EmployeeDeduction", b =>
                {
                    b.HasOne("Entities.Concrete.Employee", "Employee")
                        .WithMany("EmployeeDeductions")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Entities.Concrete.Month", "Month")
                        .WithMany("EmployeeDeductions")
                        .HasForeignKey("MonthId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Employee");

                    b.Navigation("Month");
                });

            modelBuilder.Entity("Entities.Concrete.EmployeeSalary", b =>
                {
                    b.HasOne("Entities.Concrete.Employee", "Employee")
                        .WithMany("EmployeeSalaries")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Entities.Concrete.Month", "Month")
                        .WithMany("EmployeeSalaries")
                        .HasForeignKey("MonthId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Employee");

                    b.Navigation("Month");
                });

            modelBuilder.Entity("Entities.Concrete.EmployeeSubTask", b =>
                {
                    b.HasOne("Entities.Concrete.EmployeeTask", "EmployeeTask")
                        .WithMany("EmployeeSubTasks")
                        .HasForeignKey("EmployeeTaskId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("EmployeeTask");
                });

            modelBuilder.Entity("Entities.Concrete.EmployeeTask", b =>
                {
                    b.HasOne("Entities.Concrete.Employee", "AssignedBy")
                        .WithMany("CreatedTasks")
                        .HasForeignKey("AssignedById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Entities.Concrete.Employee", "Assignee")
                        .WithMany("AssignedTasks")
                        .HasForeignKey("AssigneeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("AssignedBy");

                    b.Navigation("Assignee");
                });

            modelBuilder.Entity("Entities.Concrete.EmployeeTaskComment", b =>
                {
                    b.HasOne("Entities.Concrete.Employee", "Employee")
                        .WithMany("EmployeeTaskComments")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Entities.Concrete.EmployeeTask", "EmployeeTask")
                        .WithMany("EmployeeTaskComments")
                        .HasForeignKey("EmployeeTaskId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Employee");

                    b.Navigation("EmployeeTask");
                });

            modelBuilder.Entity("Entities.Concrete.Month", b =>
                {
                    b.HasOne("Entities.Concrete.Year", "Year")
                        .WithMany("Months")
                        .HasForeignKey("YearId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Year");
                });

            modelBuilder.Entity("Entities.Concrete.Order", b =>
                {
                    b.HasOne("Entities.Concrete.Branch", "Branch")
                        .WithMany("Orders")
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Entities.Concrete.Reservation", "Reservation")
                        .WithOne("Order")
                        .HasForeignKey("Entities.Concrete.Order", "ReservationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Entities.Concrete.Table", "Table")
                        .WithMany("Orders")
                        .HasForeignKey("TableId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Branch");

                    b.Navigation("Reservation");

                    b.Navigation("Table");
                });

            modelBuilder.Entity("Entities.Concrete.Permission", b =>
                {
                    b.HasOne("Entities.Concrete.Employee", "Employee")
                        .WithMany("Permissions")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Entities.Concrete.LeaveType", "LeaveType")
                        .WithMany("Permissions")
                        .HasForeignKey("LeaveTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Entities.Concrete.Year", "Year")
                        .WithMany("Permissions")
                        .HasForeignKey("YearId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Employee");

                    b.Navigation("LeaveType");

                    b.Navigation("Year");
                });

            modelBuilder.Entity("Entities.Concrete.Product", b =>
                {
                    b.HasOne("Entities.Concrete.MealCategory", "MealCategory")
                        .WithMany("Products")
                        .HasForeignKey("MealCategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("MealCategory");
                });

            modelBuilder.Entity("Entities.Concrete.Reservation", b =>
                {
                    b.HasOne("Entities.Concrete.Branch", "Branch")
                        .WithMany("Reservations")
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Entities.Concrete.Table", "Table")
                        .WithMany("Reservations")
                        .HasForeignKey("TableId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Branch");

                    b.Navigation("Table");
                });

            modelBuilder.Entity("Entities.Concrete.Table", b =>
                {
                    b.HasOne("Entities.Concrete.Branch", "Branch")
                        .WithMany("Tables")
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Branch");
                });

            modelBuilder.Entity("Entities.Concrete.User", b =>
                {
                    b.HasOne("Entities.Concrete.OperationClaim", "OperationClaim")
                        .WithMany("Users")
                        .HasForeignKey("OperationClaimId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OperationClaim");
                });

            modelBuilder.Entity("Entities.Concrete.City", b =>
                {
                    b.Navigation("Branches");

                    b.Navigation("Employees");
                });

            modelBuilder.Entity("Entities.Concrete.Employee", b =>
                {
                    b.Navigation("AssignedTasks");

                    b.Navigation("CreatedTasks");

                    b.Navigation("EmployeeBonuses");

                    b.Navigation("EmployeeDeductions");

                    b.Navigation("EmployeeSalaries");

                    b.Navigation("EmployeeTaskComments");

                    b.Navigation("Permissions");

                    b.Navigation("ShiftDays");
                });

            modelBuilder.Entity("Entities.Concrete.LeaveType", b =>
                {
                    b.Navigation("Permissions");
                });

            modelBuilder.Entity("Entities.Concrete.OperationClaim", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("Entities.Concrete.Shift", b =>
                {
                    b.Navigation("ShiftDays");
                });

            modelBuilder.Entity("Entities.Concrete.Branch", b =>
                {
                    b.Navigation("BranchEmployees");

                    b.Navigation("BranchImages");

                    b.Navigation("Employees");

                    b.Navigation("Orders");

                    b.Navigation("Reservations");

                    b.Navigation("Tables");
                });

            modelBuilder.Entity("Entities.Concrete.EmployeeTask", b =>
                {
                    b.Navigation("EmployeeSubTasks");

                    b.Navigation("EmployeeTaskComments");
                });

            modelBuilder.Entity("Entities.Concrete.MealCategory", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("Entities.Concrete.Month", b =>
                {
                    b.Navigation("EmployeeBonuses");

                    b.Navigation("EmployeeDeductions");

                    b.Navigation("EmployeeSalaries");
                });

            modelBuilder.Entity("Entities.Concrete.Order", b =>
                {
                    b.Navigation("OrderProducts");
                });

            modelBuilder.Entity("Entities.Concrete.Product", b =>
                {
                    b.Navigation("OrderProducts");
                });

            modelBuilder.Entity("Entities.Concrete.Reservation", b =>
                {
                    b.Navigation("Order")
                        .IsRequired();
                });

            modelBuilder.Entity("Entities.Concrete.Table", b =>
                {
                    b.Navigation("Orders");

                    b.Navigation("Reservations");
                });

            modelBuilder.Entity("Entities.Concrete.User", b =>
                {
                    b.Navigation("Employee")
                        .IsRequired();

                    b.Navigation("Evaluations");
                });

            modelBuilder.Entity("Entities.Concrete.Year", b =>
                {
                    b.Navigation("Months");

                    b.Navigation("Permissions");
                });
#pragma warning restore 612, 618
        }
    }
}
